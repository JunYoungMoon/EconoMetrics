server:
  port: 8085
  jsp-servlet:
    init-parameters:
      development: true

fred:
  api-key: ${FRED_API_KEY}



#  servlet:
#    session:
#      cookie:
#        same-site: none
#        secure: true

spring:
  redis:
    host: localhost
    port: 6379
    timeout: 3000ms
    lettuce:
      pool:
        max-active: 50
        max-idle: 10
        max-wait: -1ms
        min-idle: 5
    serializer: org.springframework.data.redis.serializer.GenericToStringSerializer
    hash-key-serializer: org.springframework.data.redis.serializer.GenericToStringSerializer
    value-serializer: org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer
    hash-value-serializer: org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer

spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${CLIENT_ID}
            client-secret: ${CLIENT_SECRET}
            scope:
              - email
              - profile
  mvc:
    view:
      prefix: /WEB-INF/view/
      suffix: .jsp
  #    static-path-pattern: /resources/static/**

  devtools:
    livereload:
      enabled: true

  sql:
    init:
      #      mode: always #초기 데이터 세팅, 초기데이터 반영 O
      mode: never #실제 개발과 운영서버에서 사용할것, 초기데이터 반영 X

  datasource:
    #로컬서버 DB 접속
    #    driver-class-name: com.mysql.cj.jdbc.Driver
    #    url: jdbc:mysql://localhost:3306/kampdb
    #    username: root
    #    password: 1234

    #개발서버 DB 정보
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/econo_metrics
    username: econometrics
    password: econometrics

  session:
    timeout: 3600
    store-type: jdbc
    jdbc:
      initialize-schema: never
      table-name: SPRING_SESSION

  web:
    resources:
      static-locations: file:src/main/resources/static/



logging:
  level:
    org.hibernate.sql: debug
    org.hibernate.type: trace
#    설정파일



